{
  "version": 3,
  "sources": ["../../antd/es/style/roundedArrow.js", "../../antd/es/style/placementArrow.js", "../../antd/es/_util/placements.js"],
  "sourcesContent": ["import { unit } from '@ant-design/cssinjs';\nexport function getArrowToken(token) {\n  const {\n    sizePopupArrow,\n    borderRadiusXS,\n    borderRadiusOuter\n  } = token;\n  const unitWidth = sizePopupArrow / 2;\n  const ax = 0;\n  const ay = unitWidth;\n  const bx = borderRadiusOuter * 1 / Math.sqrt(2);\n  const by = unitWidth - borderRadiusOuter * (1 - 1 / Math.sqrt(2));\n  const cx = unitWidth - borderRadiusXS * (1 / Math.sqrt(2));\n  const cy = borderRadiusOuter * (Math.sqrt(2) - 1) + borderRadiusXS * (1 / Math.sqrt(2));\n  const dx = 2 * unitWidth - cx;\n  const dy = cy;\n  const ex = 2 * unitWidth - bx;\n  const ey = by;\n  const fx = 2 * unitWidth - ax;\n  const fy = ay;\n  const shadowWidth = unitWidth * Math.sqrt(2) + borderRadiusOuter * (Math.sqrt(2) - 2);\n  const polygonOffset = borderRadiusOuter * (Math.sqrt(2) - 1);\n  const arrowPolygon = `polygon(${polygonOffset}px 100%, 50% ${polygonOffset}px, ${2 * unitWidth - polygonOffset}px 100%, ${polygonOffset}px 100%)`;\n  const arrowPath = `path('M ${ax} ${ay} A ${borderRadiusOuter} ${borderRadiusOuter} 0 0 0 ${bx} ${by} L ${cx} ${cy} A ${borderRadiusXS} ${borderRadiusXS} 0 0 1 ${dx} ${dy} L ${ex} ${ey} A ${borderRadiusOuter} ${borderRadiusOuter} 0 0 0 ${fx} ${fy} Z')`;\n  return {\n    arrowShadowWidth: shadowWidth,\n    arrowPath,\n    arrowPolygon\n  };\n}\nexport const genRoundedArrow = (token, bgColor, boxShadow) => {\n  const {\n    sizePopupArrow,\n    arrowPolygon,\n    arrowPath,\n    arrowShadowWidth,\n    borderRadiusXS,\n    calc\n  } = token;\n  return {\n    pointerEvents: 'none',\n    width: sizePopupArrow,\n    height: sizePopupArrow,\n    overflow: 'hidden',\n    '&::before': {\n      position: 'absolute',\n      bottom: 0,\n      insetInlineStart: 0,\n      width: sizePopupArrow,\n      height: calc(sizePopupArrow).div(2).equal(),\n      background: bgColor,\n      clipPath: {\n        _multi_value_: true,\n        value: [arrowPolygon, arrowPath]\n      },\n      content: '\"\"'\n    },\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      width: arrowShadowWidth,\n      height: arrowShadowWidth,\n      bottom: 0,\n      insetInline: 0,\n      margin: 'auto',\n      borderRadius: {\n        _skip_check_: true,\n        value: `0 0 ${unit(borderRadiusXS)} 0`\n      },\n      transform: 'translateY(50%) rotate(-135deg)',\n      boxShadow,\n      zIndex: 0,\n      background: 'transparent'\n    }\n  };\n};", "import { unit } from '@ant-design/cssinjs';\nimport { genRoundedArrow } from './roundedArrow';\nexport const MAX_VERTICAL_CONTENT_RADIUS = 8;\nexport function getArrowOffsetToken(options) {\n  const {\n    contentRadius,\n    limitVerticalRadius\n  } = options;\n  const arrowOffset = contentRadius > 12 ? contentRadius + 2 : 12;\n  const arrowOffsetVertical = limitVerticalRadius ? MAX_VERTICAL_CONTENT_RADIUS : arrowOffset;\n  return {\n    arrowOffsetHorizontal: arrowOffset,\n    arrowOffsetVertical\n  };\n}\nfunction isInject(valid, code) {\n  if (!valid) {\n    return {};\n  }\n  return code;\n}\nexport default function getArrowStyle(token, colorBg, options) {\n  const {\n    componentCls,\n    boxShadowPopoverArrow,\n    arrowOffsetVertical,\n    arrowOffsetHorizontal\n  } = token;\n  const {\n    arrowDistance = 0,\n    arrowPlacement = {\n      left: true,\n      right: true,\n      top: true,\n      bottom: true\n    }\n  } = options || {};\n  return {\n    [componentCls]: Object.assign(Object.assign(Object.assign(Object.assign({\n      // ============================ Basic ============================\n      [`${componentCls}-arrow`]: [Object.assign(Object.assign({\n        position: 'absolute',\n        zIndex: 1,\n        display: 'block'\n      }, genRoundedArrow(token, colorBg, boxShadowPopoverArrow)), {\n        '&:before': {\n          background: colorBg\n        }\n      })]\n    }, isInject(!!arrowPlacement.top, {\n      [[`&-placement-top > ${componentCls}-arrow`, `&-placement-topLeft > ${componentCls}-arrow`, `&-placement-topRight > ${componentCls}-arrow`].join(',')]: {\n        bottom: arrowDistance,\n        transform: 'translateY(100%) rotate(180deg)'\n      },\n      [`&-placement-top > ${componentCls}-arrow`]: {\n        left: {\n          _skip_check_: true,\n          value: '50%'\n        },\n        transform: 'translateX(-50%) translateY(100%) rotate(180deg)'\n      },\n      '&-placement-topLeft': {\n        '--arrow-offset-horizontal': arrowOffsetHorizontal,\n        [`> ${componentCls}-arrow`]: {\n          left: {\n            _skip_check_: true,\n            value: arrowOffsetHorizontal\n          }\n        }\n      },\n      '&-placement-topRight': {\n        '--arrow-offset-horizontal': `calc(100% - ${unit(arrowOffsetHorizontal)})`,\n        [`> ${componentCls}-arrow`]: {\n          right: {\n            _skip_check_: true,\n            value: arrowOffsetHorizontal\n          }\n        }\n      }\n    })), isInject(!!arrowPlacement.bottom, {\n      [[`&-placement-bottom > ${componentCls}-arrow`, `&-placement-bottomLeft > ${componentCls}-arrow`, `&-placement-bottomRight > ${componentCls}-arrow`].join(',')]: {\n        top: arrowDistance,\n        transform: `translateY(-100%)`\n      },\n      [`&-placement-bottom > ${componentCls}-arrow`]: {\n        left: {\n          _skip_check_: true,\n          value: '50%'\n        },\n        transform: `translateX(-50%) translateY(-100%)`\n      },\n      '&-placement-bottomLeft': {\n        '--arrow-offset-horizontal': arrowOffsetHorizontal,\n        [`> ${componentCls}-arrow`]: {\n          left: {\n            _skip_check_: true,\n            value: arrowOffsetHorizontal\n          }\n        }\n      },\n      '&-placement-bottomRight': {\n        '--arrow-offset-horizontal': `calc(100% - ${unit(arrowOffsetHorizontal)})`,\n        [`> ${componentCls}-arrow`]: {\n          right: {\n            _skip_check_: true,\n            value: arrowOffsetHorizontal\n          }\n        }\n      }\n    })), isInject(!!arrowPlacement.left, {\n      [[`&-placement-left > ${componentCls}-arrow`, `&-placement-leftTop > ${componentCls}-arrow`, `&-placement-leftBottom > ${componentCls}-arrow`].join(',')]: {\n        right: {\n          _skip_check_: true,\n          value: arrowDistance\n        },\n        transform: 'translateX(100%) rotate(90deg)'\n      },\n      [`&-placement-left > ${componentCls}-arrow`]: {\n        top: {\n          _skip_check_: true,\n          value: '50%'\n        },\n        transform: 'translateY(-50%) translateX(100%) rotate(90deg)'\n      },\n      [`&-placement-leftTop > ${componentCls}-arrow`]: {\n        top: arrowOffsetVertical\n      },\n      [`&-placement-leftBottom > ${componentCls}-arrow`]: {\n        bottom: arrowOffsetVertical\n      }\n    })), isInject(!!arrowPlacement.right, {\n      [[`&-placement-right > ${componentCls}-arrow`, `&-placement-rightTop > ${componentCls}-arrow`, `&-placement-rightBottom > ${componentCls}-arrow`].join(',')]: {\n        left: {\n          _skip_check_: true,\n          value: arrowDistance\n        },\n        transform: 'translateX(-100%) rotate(-90deg)'\n      },\n      [`&-placement-right > ${componentCls}-arrow`]: {\n        top: {\n          _skip_check_: true,\n          value: '50%'\n        },\n        transform: 'translateY(-50%) translateX(-100%) rotate(-90deg)'\n      },\n      [`&-placement-rightTop > ${componentCls}-arrow`]: {\n        top: arrowOffsetVertical\n      },\n      [`&-placement-rightBottom > ${componentCls}-arrow`]: {\n        bottom: arrowOffsetVertical\n      }\n    }))\n  };\n}", "import { getArrowOffsetToken } from '../style/placementArrow';\nexport function getOverflowOptions(placement, arrowOffset, arrowWidth, autoAdjustOverflow) {\n  if (autoAdjustOverflow === false) {\n    return {\n      adjustX: false,\n      adjustY: false\n    };\n  }\n  const overflow = autoAdjustOverflow && typeof autoAdjustOverflow === 'object' ? autoAdjustOverflow : {};\n  const baseOverflow = {};\n  switch (placement) {\n    case 'top':\n    case 'bottom':\n      baseOverflow.shiftX = arrowOffset.arrowOffsetHorizontal * 2 + arrowWidth;\n      baseOverflow.shiftY = true;\n      baseOverflow.adjustY = true;\n      break;\n    case 'left':\n    case 'right':\n      baseOverflow.shiftY = arrowOffset.arrowOffsetVertical * 2 + arrowWidth;\n      baseOverflow.shiftX = true;\n      baseOverflow.adjustX = true;\n      break;\n  }\n  const mergedOverflow = Object.assign(Object.assign({}, baseOverflow), overflow);\n  // Support auto shift\n  if (!mergedOverflow.shiftX) {\n    mergedOverflow.adjustX = true;\n  }\n  if (!mergedOverflow.shiftY) {\n    mergedOverflow.adjustY = true;\n  }\n  return mergedOverflow;\n}\nconst PlacementAlignMap = {\n  left: {\n    points: ['cr', 'cl']\n  },\n  right: {\n    points: ['cl', 'cr']\n  },\n  top: {\n    points: ['bc', 'tc']\n  },\n  bottom: {\n    points: ['tc', 'bc']\n  },\n  topLeft: {\n    points: ['bl', 'tl']\n  },\n  leftTop: {\n    points: ['tr', 'tl']\n  },\n  topRight: {\n    points: ['br', 'tr']\n  },\n  rightTop: {\n    points: ['tl', 'tr']\n  },\n  bottomRight: {\n    points: ['tr', 'br']\n  },\n  rightBottom: {\n    points: ['bl', 'br']\n  },\n  bottomLeft: {\n    points: ['tl', 'bl']\n  },\n  leftBottom: {\n    points: ['br', 'bl']\n  }\n};\nconst ArrowCenterPlacementAlignMap = {\n  topLeft: {\n    points: ['bl', 'tc']\n  },\n  leftTop: {\n    points: ['tr', 'cl']\n  },\n  topRight: {\n    points: ['br', 'tc']\n  },\n  rightTop: {\n    points: ['tl', 'cr']\n  },\n  bottomRight: {\n    points: ['tr', 'bc']\n  },\n  rightBottom: {\n    points: ['bl', 'cr']\n  },\n  bottomLeft: {\n    points: ['tl', 'bc']\n  },\n  leftBottom: {\n    points: ['br', 'cl']\n  }\n};\nconst DisableAutoArrowList = new Set(['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']);\nexport default function getPlacements(config) {\n  const {\n    arrowWidth,\n    autoAdjustOverflow,\n    arrowPointAtCenter,\n    offset,\n    borderRadius,\n    visibleFirst\n  } = config;\n  const halfArrowWidth = arrowWidth / 2;\n  const placementMap = {};\n  Object.keys(PlacementAlignMap).forEach(key => {\n    const template = arrowPointAtCenter && ArrowCenterPlacementAlignMap[key] || PlacementAlignMap[key];\n    const placementInfo = Object.assign(Object.assign({}, template), {\n      offset: [0, 0],\n      dynamicInset: true\n    });\n    placementMap[key] = placementInfo;\n    // Disable autoArrow since design is fixed position\n    if (DisableAutoArrowList.has(key)) {\n      placementInfo.autoArrow = false;\n    }\n    // Static offset\n    switch (key) {\n      case 'top':\n      case 'topLeft':\n      case 'topRight':\n        placementInfo.offset[1] = -halfArrowWidth - offset;\n        break;\n      case 'bottom':\n      case 'bottomLeft':\n      case 'bottomRight':\n        placementInfo.offset[1] = halfArrowWidth + offset;\n        break;\n      case 'left':\n      case 'leftTop':\n      case 'leftBottom':\n        placementInfo.offset[0] = -halfArrowWidth - offset;\n        break;\n      case 'right':\n      case 'rightTop':\n      case 'rightBottom':\n        placementInfo.offset[0] = halfArrowWidth + offset;\n        break;\n    }\n    // Dynamic offset\n    const arrowOffset = getArrowOffsetToken({\n      contentRadius: borderRadius,\n      limitVerticalRadius: true\n    });\n    if (arrowPointAtCenter) {\n      switch (key) {\n        case 'topLeft':\n        case 'bottomLeft':\n          placementInfo.offset[0] = -arrowOffset.arrowOffsetHorizontal - halfArrowWidth;\n          break;\n        case 'topRight':\n        case 'bottomRight':\n          placementInfo.offset[0] = arrowOffset.arrowOffsetHorizontal + halfArrowWidth;\n          break;\n        case 'leftTop':\n        case 'rightTop':\n          placementInfo.offset[1] = -arrowOffset.arrowOffsetHorizontal * 2 + halfArrowWidth;\n          break;\n        case 'leftBottom':\n        case 'rightBottom':\n          placementInfo.offset[1] = arrowOffset.arrowOffsetHorizontal * 2 - halfArrowWidth;\n          break;\n      }\n    }\n    // Overflow\n    placementInfo.overflow = getOverflowOptions(key, arrowOffset, arrowWidth, autoAdjustOverflow);\n    // VisibleFirst\n    if (visibleFirst) {\n      placementInfo.htmlRegion = 'visibleFirst';\n    }\n  });\n  return placementMap;\n}"],
  "mappings": "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",
  "names": []
}
